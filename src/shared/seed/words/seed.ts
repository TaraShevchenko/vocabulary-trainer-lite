import { PrismaClient } from "@prisma/client";
import { parse } from "csv-parse/sync";
import { config } from "dotenv";
import * as fs from "fs";
import * as path from "path";

// Load environment variables from .env file
config();

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è ensureSystemUser –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≥—Ä—É–ø–ø—ã —Å–ª–æ–≤ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏

interface WordData {
  groupName: string;
  english: string;
  russian: string;
  description: string;
}

/**
 * –ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
 */
function parseWordsCSV(): WordData[] {
  const csvPath = path.join(
    process.cwd(),
    "src",
    "shared",
    "seed",
    ".data",
    "describing_people_during_lesson.csv",
  );

  if (!fs.existsSync(csvPath)) {
    throw new Error(`CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
  }

  const csvContent = fs.readFileSync(csvPath, "utf-8");

  const records = parse(csvContent, {
    columns: ["groupName", "english", "russian", "description"],
    skip_empty_lines: true,
    trim: true,
    from_line: 2, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  });

  return records as WordData[];
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
 */
function groupWordsByCategory(words: WordData[]): Map<string, WordData[]> {
  const groupedWords = new Map<string, WordData[]>();

  for (const wordData of words) {
    const { groupName } = wordData;
    if (!groupedWords.has(groupName)) {
      groupedWords.set(groupName, []);
    }
    groupedWords.get(groupName)!.push(wordData);
  }

  return groupedWords;
}

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞–º–∏ —Å–ª–æ–≤ –∏ —Å–ª–æ–≤–∞–º–∏
 */
export async function seedWordsAndGroups() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏...");

  try {
    // –ü–∞—Ä—Å–∏–º CSV —Ñ–∞–π–ª
    console.log("üìÑ –ü–∞—Ä—Å–∏–º CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏...");
    const wordsData = parseWordsCSV();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${wordsData.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV —Ñ–∞–π–ª–µ`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groupedWords = groupWordsByCategory(wordsData);
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${groupedWords.size} –≥—Ä—É–ø–ø —Å–ª–æ–≤`);

    let createdGroups = 0;
    let createdWords = 0;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ —Å–ª–æ–≤–∞
    for (const [groupName, wordDataList] of groupedWords) {
      try {
        // –ë–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã)
        const groupDescription =
          wordDataList.length > 0
            ? `Words group: ${groupName}`
            : `Words group: ${groupName}`;

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        const wordGroup = await prisma.wordGroup.upsert({
          where: {
            name: groupName,
          },
          create: {
            name: groupName,
            description: groupDescription,
            isGlobal: true, // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É
          },
          update: {
            description: groupDescription,
          },
        });
        createdGroups++;
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: ${groupName}`);

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
        for (const wordData of wordDataList) {
          try {
            await prisma.word.upsert({
              where: {
                english_groupId: {
                  english: wordData.english,
                  groupId: wordGroup.id,
                },
              },
              create: {
                english: wordData.english,
                russian: wordData.russian,
                description: wordData.description,
                groupId: wordGroup.id,
              },
              update: {
                russian: wordData.russian,
                description: wordData.description,
              },
            });
            createdWords++;
          } catch (error) {
            console.error(
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞ "${wordData.english}" –≤ –≥—Ä—É–ø–ø–µ "${groupName}":`,
              error,
            );
          }
        }

        console.log(
          `üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ "${groupName}": ${wordDataList.length}`,
        );
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã "${groupName}":`, error);
      }
    }

    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:");
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${createdGroups}`);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ–≤: ${createdWords}`);
    console.log("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
seedWordsAndGroups()
  .then(() => {
    console.log("‚úÖ Seed —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è seed —Å–∫—Ä–∏–ø—Ç–∞:", error);
    process.exit(1);
  });
