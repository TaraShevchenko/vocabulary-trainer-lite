import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å —É—á–µ—Ç–æ–º —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
 */
export async function clearWordsAndGroups() {
  console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö...");

  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...");
    const deletedProgress = await prisma.progress.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${deletedProgress.count}`);

    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞...");
    const deletedWords = await prisma.word.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤: ${deletedWords.count}`);

    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—ã —Å–ª–æ–≤...");
    const deletedGroups = await prisma.wordGroup.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: ${deletedGroups.count}`);

    console.log("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

    return {
      deletedProgress: deletedProgress.count,
      deletedWords: deletedWords.count,
      deletedGroups: deletedGroups.count,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
clearWordsAndGroups()
  .then((result) => {
    console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:", result);
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏:", error);
    process.exit(1);
  });
